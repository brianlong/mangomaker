"use strict";
// - deposits == 0
// - borrrows == 0
// - all spot open orders empty and closed
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const web3_js_1 = require("@solana/web3.js");
const __1 = require("..");
const config_1 = require("../config");
const config = new config_1.Config(__1.IDS);
const cluster = (process.env.CLUSTER || 'mainnet');
const groupName = process.env.GROUP || 'mainnet.1';
const marketIndex = 0;
const groupIds = config.getGroup(cluster, groupName);
const marketInfo = groupIds.perpMarkets.find((m) => m.marketIndex == marketIndex);
function checkSpotMarket() {
    return __awaiter(this, void 0, void 0, function* () {
        const connection = new web3_js_1.Connection('https://mango.rpcpool.com/eed31807f710e4bb098779fb9f67');
        const client = new __1.MangoClient(connection, groupIds.mangoProgramId);
        const mangoGroup = yield client.getMangoGroup(groupIds.publicKey);
        const cache = yield mangoGroup.loadCache(connection);
        const marketCache = cache.perpMarketCache[marketIndex];
        const rootBank = (yield mangoGroup.loadRootBanks(connection))[marketIndex];
        const nodeBanks = yield rootBank.loadNodeBanks(connection);
        const vaults = yield Promise.all(nodeBanks.map((n) => {
            return connection.getAccountInfo(n.vault).then((ai) => {
                return new __1.TokenAccount(n.vault, __1.TokenAccountLayout.decode(ai.data));
            });
        }));
        const accounts = yield client.getAllMangoAccounts(mangoGroup, undefined, true);
        let hasOpenOrdersAccounts = false;
        vaults.forEach((v) => console.log(v.amount));
        const vaultBalance = vaults.reduce((sum, v) => sum + v.amount, 0);
        for (const account of accounts) {
            if (account.spotOpenOrders[marketIndex] != web3_js_1.PublicKey.default) {
                hasOpenOrdersAccounts = true;
            }
        }
        console.log(`Deposits are 0 ${rootBank.getNativeTotalDeposit() == __1.ZERO_I80F48 ? '✅' : '❎'}`);
        console.log(`Borrows are 0 ${rootBank.getNativeTotalBorrow() == __1.ZERO_I80F48 ? '✅' : '❎'}`);
        console.log(`Vault balance is 0 ${vaultBalance ? '✅' : '❎'}`);
        console.log(`All open orders accounts closed ${!hasOpenOrdersAccounts ? '✅' : '❎'}`);
    });
}
checkSpotMarket();
//# sourceMappingURL=delistSpotChecks.js.map